<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on baris.io</title><link>https://baris.io/posts/</link><description>Recent content in Posts on baris.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Apr 2021 16:00:00 +0200</lastBuildDate><atom:link href="https://baris.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>2021 April Reading List</title><link>https://baris.io/posts/2021-april-reading-list/</link><pubDate>Fri, 30 Apr 2021 16:00:00 +0200</pubDate><guid>https://baris.io/posts/2021-april-reading-list/</guid><description>I will be sharing roughly grouped links to articles or videos I enjoyed during the month and this is the first one.
Architecture Heroku style deployments
build your own X
Porto - a modern software architecture pattern
GitOps recipe for progressive delivery
Istio telemetry
One Man SaaS one man SaaS architecture
tools of the trade
UML Diagrams has UML died without anyone noticing?
why UML really died?
Programming why is python so popular despite being so slow</description><content type="html"><![CDATA[<p>I will be sharing roughly grouped links to articles or videos I enjoyed during the month and this is the first one.</p>
<h2 id="architecture">Architecture</h2>
<p><a href="https://ricardoanderegg.com/posts/git-push-deployments-docker-tags/">Heroku style deployments</a></p>
<p><a href="https://github.com/danistefanovic/build-your-own-x">build your own X</a></p>
<p><a href="https://github.com/Mahmoudz/Porto">Porto - a modern software architecture pattern</a></p>
<p><a href="https://dev.to/stefanprodan/a-gitops-recipe-for-progressive-delivery-2pa3">GitOps recipe for progressive delivery</a></p>
<p><a href="https://blog.christianposta.com/understanding-istio-telemetry-v2/">Istio telemetry</a></p>
<h3 id="one-man-saas">One Man SaaS</h3>
<p><a href="https://anthonynsimon.com/blog/one-man-saas-architecture/">one man SaaS architecture</a></p>
<p><a href="https://anthonynsimon.com/blog/tools-of-the-trade/">tools of the trade</a></p>
<h3 id="uml-diagrams">UML Diagrams</h3>
<p><a href="https://garba.org/posts/2021/uml/">has UML died without anyone noticing?</a></p>
<p><a href="https://buttondown.email/hillelwayne/archive/why-uml-really-died/">why UML really died?</a></p>
<h2 id="programming">Programming</h2>
<p><a href="https://www.sethserver.com/python/why-is-python-so-slow.html">why is python so popular despite being so slow</a></p>
<p><a href="https://hodovi.ch/blog/advanced-usage-python-requests-timeouts-retries-hooks/">advanced python requests</a></p>
<p><a href="https://github.com/klen/py-frameworks-bench">python web framework benchmark</a></p>
<p><a href="https://dev.to/lucasnevespereira/write-a-rest-api-in-golang-following-best-practices-pe9">REST API in golang</a></p>
<p><a href="https://www.teamten.com/lawrence/writings/java-for-everything.html">Java for everything</a></p>
<p><a href="https://www.matuzo.at/blog/html-boilerplate/">HTML boilerplate</a></p>
<p><a href="https://changelog.com/posts/you-might-as-well-timestamp-it">you might as well timestamp it</a></p>
<p><a href="https://blog.reverberate.org/2021/04/21/musttail-efficient-interpreters.html">parsing Protobuf at 2+GB/s</a></p>
<p><a href="https://markodenic.com/use-google-like-a-pro/">intermediate google-fu</a></p>
<h2 id="tech-drama">Tech Drama</h2>
<h3 id="ci-and-cryptocurrency-miners">CI and Cryptocurrency Miners</h3>
<p><a href="https://therecord.media/github-investigating-crypto-mining-campaign-abusing-its-server-infrastructure/">GitHub is investigating crypto-miners abusing its servers</a></p>
<p><a href="https://layerci.com/blog/crypto-miners-are-killing-free-ci/">crypto-miners are killing free ci</a></p>
<p><a href="https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html">cryptocurrency is a disaster</a></p>
<p><a href="https://gregoryszorc.com/blog/2021/04/07/modern-ci-is-too-complex-and-misdirected/">modern CI is too complex and misdirected</a></p>
<h3 id="basecamp---politics">Basecamp - Politics</h3>
<p><a href="https://world.hey.com/jason/changes-at-basecamp-7f32afc5">changes at Basecamp</a></p>
<p><a href="https://world.hey.com/dhh/basecamp-s-new-etiquette-regarding-societal-politics-at-work-b44bef69">Basecamp etiquette regarding societal politics at work</a></p>
<h3 id="aws---opensearch">AWS - OpenSearch</h3>
<p><a href="https://aws.amazon.com/blogs/opensource/introducing-opensearch/">AWS OpensSearch</a></p>
<p><a href="https://www.elastic.co/what-is/opensearch">what is OpenSearch - by Elastic</a></p>
]]></content></item><item><title>Python Type Hints</title><link>https://baris.io/posts/python-typing/</link><pubDate>Tue, 27 Apr 2021 00:28:43 +0200</pubDate><guid>https://baris.io/posts/python-typing/</guid><description>The programming language I feel the most proficient and effective in is definitely Java, so I feel more at home with statically typed languages. Even though I really like Java and Spring Boot for large-scale web applications, Python is my go-to language for one-time-scripts, smaller apps and especially aws lambda functions
I&amp;rsquo;ve been writing a lot more python recently, and I really liked a library called typing. typing is a standard library module which provides a runtime to support type hints.</description><content type="html"><![CDATA[<p>The programming language I feel the most proficient and effective in is definitely Java, so I feel more at home with
statically typed languages. Even though I really like Java and <a href="https://spring.io/projects/spring-boot">Spring Boot</a> for
large-scale web applications, Python is my go-to language for one-time-scripts, smaller apps and
especially <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html">aws lambda functions</a></p>
<p>I&rsquo;ve been writing a lot more python recently, and I really liked a library called typing.
<em>typing</em> is a standard library module which provides a runtime to support type hints.</p>
<h3 id="type-hints">Type Hints</h3>
<p><em>type hinting</em> in this context means providing the types for parameters and returned objects.<br>
This is a simple example that we can see in the <a href="https://docs.python.org/3/library/typing.html">docs</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">greeting</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="n">name</span>
</code></pre></div><ul>
<li>a parameter <em>name</em> with the type of string</li>
<li>returned object of type string</li>
</ul>
<p>Apart from str, we can use types like List, Set, Dict or Tuple.</p>
<h3 id="static-type-checking">Static Type Checking?</h3>
<p>It is important to note that Python runtime does not enforce anything regarding these types. They are just &ldquo;hints&rdquo;
You might be wondering about the usefulness of this library if there is no enforcement but there are many benefits we
get.</p>
<ul>
<li>Dramatically reduces the number of TypeErrors you get.</li>
<li>Helps IDEs and static analyzers reason about your code. They can analyze it much more accurately with types</li>
<li>Helps documentation</li>
</ul>
<h3 id="where-to-use-them">Where to Use Them?</h3>
<p>In my opinion, If multiple people are working on a python codebase, it can be a great asset to the team because it makes
the code easier understand for everyone involved</p>
<p>It adds a development time overhead so might not be needed in throwaway one-time scripts, although we can still see the
benefit of type safety especially if it is a critical task.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">evaluate_users</span><span class="p">(</span><span class="n">user_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
    <span class="n">user_details</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">user_ids</span><span class="p">:</span>
        <span class="n">user_details</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">get_random_user_details</span><span class="p">(</span><span class="nb">id</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">user_details</span>


<span class="k">def</span> <span class="nf">get_random_user_details</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]]:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choices</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">ascii_uppercase</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">digits</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">))</span>
    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">99</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="p">:</span> <span class="n">age</span><span class="p">}</span>

</code></pre></div><p>If the expected type for user_id was an int instead of str, I would see a warning like this in IDEA,
<img src="/images/typing/ide-warning.png" alt="IDE warning"></p>
<p>Similarly, if the return does not match the expected one, the warning would look like this.
<img src="/images/typing/return-type.png" alt="IDE warning"></p>
<p>There are other benefits of this library, but I think parameter and return types are enough to consider using it</p>
]]></content></item><item><title>Infrastructure as Code</title><link>https://baris.io/posts/infrastructure-as-code/</link><pubDate>Sun, 25 Apr 2021 00:02:25 +0200</pubDate><guid>https://baris.io/posts/infrastructure-as-code/</guid><description>Infrastructure as Code is the practice of managing and provisioning resources through version controlled definition files.
Things to note beforehand
Cloud providers like AWS, Azure and GCP allow us to provision new resources in mere minutes or even seconds. Multiple deployments to production every day is not an exceptional thing anymore We want to use a similar infrastructure for multiple environments(dev,staging,prod etc.) and regions Infrastructure on cloud does not only mean hosting applications on a virtual machine It also includes services we can use like data stores, queues/topics, network components, access rights/permission models and much more Utilizing these resources efficiently will help us move forward much faster What problem does it solve?</description><content type="html"><![CDATA[<p><em>Infrastructure as Code</em> is the practice of managing and provisioning resources through version controlled definition files.</p>
<p>Things to note beforehand</p>
<ul>
<li>Cloud providers like AWS, Azure and GCP allow us to provision new resources in mere minutes or even seconds.</li>
<li>Multiple deployments to production every day is not an exceptional thing anymore</li>
<li>We want to use a similar infrastructure for multiple environments(dev,staging,prod etc.) and regions</li>
<li>Infrastructure on cloud does not only mean hosting applications on a virtual machine
It also includes services we can use like data stores, queues/topics, network components, access rights/permission models and much more</li>
<li>Utilizing these resources efficiently will help us move forward much faster</li>
</ul>
<h2 id="what-problem-does-it-solve">What problem does it solve?</h2>
<p>While cloud computing provides us an easy and fast way to get access to new resources, we still have to create, keep an inventory of and decommission them when necessary.
In a traditional on-premise setup, we would document and apply all the steps manually when we need to install and run services on these servers.
However, this approach does not scale well if we want to get the full benefits of using cloud providers.
Because development and maintenance of an application on cloud can easily require hundreds of resources across different accounts.
So we definitely need some kind of proper automation.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<ul>
<li>Create configuration files or scripts defining required resources, and their relations with each other.
These can be written in bash or domain specific languages like <a href="https://www.terraform.io">Terraform/HCL</a> or <a href="https://aws.amazon.com/cloudformation/resources/templates/">Cloudformation Templates</a></li>
<li>Store them in a version control system like git. This can be done in two ways and both has their advantages/disadvantages.
<ul>
<li>Along with the service using these resources</li>
<li>In a centralized repository which contains all resources used by the company</li>
</ul>
</li>
<li>Integrate these tools/scripts to our CI/CD pipeline</li>
<li>Applying the same configuration should always give the same result regardless of the state of the infrastructure when we started.
This is a broader concept called <a href="https://en.wikipedia.org/wiki/Idempotence">Idempotency</a> and it is a really important in IaC</li>
</ul>
<h3 id="imperative-vs-declarative">Imperative vs Declarative</h3>
<p>It is important to note that Infrastructure as Code can be implemented with both approaches effectively.</p>
<p>Using an imperative approach to create an AWS Lambda function would look like below</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">aws lambda create-function <span class="se">\
</span><span class="se"></span>    --function-name my-function <span class="se">\
</span><span class="se"></span>    --runtime nodejs12.x <span class="se">\
</span><span class="se"></span>    --zip-file fileb://my-function.zip <span class="se">\
</span><span class="se"></span>    --handler exports.test <span class="se">\
</span><span class="se"></span>    --role arn:aws:iam::123456789012:role/service-role/iam_for_lambda
</code></pre></div><p>While with a declarative approach, it would look like this.</p>
<div class="highlight"><pre class="chroma"><code class="language-HCL" data-lang="HCL"><span class="k">resource</span> <span class="s2">&#34;aws_lambda_function&#34; &#34;my-function&#34;</span> {
<span class="n">  filename</span>      <span class="o">=</span> <span class="s2">&#34;lambda_function_payload.zip&#34;</span>
<span class="n">  function_name</span> <span class="o">=</span> <span class="s2">&#34;lambda_function_name&#34;</span>
<span class="n">  role</span>          <span class="o">=</span> <span class="k">aws_iam_role</span><span class="p">.</span><span class="k">iam_for_lambda</span><span class="p">.</span><span class="k">arn</span>
<span class="n">  handler</span>       <span class="o">=</span> <span class="s2">&#34;exports.test&#34;</span>
<span class="n">  source_code_hash</span> <span class="o">=</span> <span class="k">filebase64sha256</span><span class="p">(</span><span class="s2">&#34;my-function.zip&#34;</span><span class="p">)</span>
<span class="n">  runtime</span> <span class="o">=</span> <span class="s2">&#34;nodejs12.x&#34;</span>
}
</code></pre></div><h2 id="why-should-we-use-it">Why should we use it?</h2>
<h3 id="consistency">Consistency</h3>
<p>Even if we are really careful, any manual process involving humans is error prone.
Getting the same result every time you need a new environment prevents so many problems like having different configurations
for test and prod environments or wasting time on errors due to misconfigurations</p>
<h3 id="speed">Speed</h3>
<p>If we properly integrate infrastructure as code to our build pipelines, our resource provisioning can be completely automated.
Not spending time on creating resources means more time efficient development and deployment processes.</p>
<h3 id="accountability">Accountability</h3>
<p>We already have best practices regarding source control. With peer reviews and pull requests, any change in the infrastructure is visible and obvious
We can track down what changed with which deployment and also revert to a previous version easily if we need to.</p>
<h3 id="scalability">Scalability</h3>
<p>We might need to deploy our services to completely new regions to expand or new environments for reasons like development, tests or demos.
With infrastructure as code, we are not bound to number of people who can create infrastructure and manage them for our team.</p>
<h2 id="conclusion">Conclusion</h2>
<p>My first experience with IaC was an in-house tool made by engineers in the company, and it saved so much time and effort when we were developing Opsgenie.
I can&rsquo;t imagine how difficult and stressful deployments would be if we were manually creating database tables, iam policies and queues every other day.</p>
<p>More recently, I have been using Terraform at work and what you can build with it is impressive. Especially since there are so many modules available to use.
I will take a look at <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints#localstack">creating infrastructure with</a> <a href="https://github.com/localstack/localstack">localstack</a> on a personal project soon</p>
<p>There is obviously a learning curve for everyone involved, but it is certainly worth the effort.<br>
In my opinion, this is one thing every software company should spend some time on.</p>
]]></content></item><item><title>Observability 101</title><link>https://baris.io/posts/observability/</link><pubDate>Mon, 19 Apr 2021 23:50:25 +0200</pubDate><guid>https://baris.io/posts/observability/</guid><description>Systems we build and maintain are becoming more complex and abstract with the increase in popularity of distributed systems, microservices, and cloud providers. With these new concepts, our view of failures has changed as well.
We have to assume things can and will break when we do not expect. So we have to make sure it is possible to understand what is happening in our services it any given time</description><content type="html"><![CDATA[<p>Systems we build and maintain are becoming more complex and abstract with the increase in popularity of distributed systems, microservices, and cloud providers. With these new concepts, our view of failures has changed as well.</p>
<p>We have to assume things can and will break when we do not expect. So we have to make sure it is possible to understand what is happening in our services it any given time</p>
<h2 id="observability">Observability</h2>
<p>The Wikipedia definition of observability is</p>
<blockquote>
<p>observability is a measure of how well internal states of a system can be inferred from knowledge of its external outputs.</p>
</blockquote>
<p>In software, these external outputs are usually grouped as <em>Logs</em>, <em>Metrics</em>, and <em>Request Traces</em>. Called <em>The Three Pillars of Observability</em>, they solve different problems, have different weaknesses and strengths.</p>
<h2 id="monitoring">Monitoring</h2>
<p>Monitoring is another keyword that is used together with observability. It is the act of collecting these external outputs and after aggregating, analyzing and visualizing them, creating meaningful alerts with this data. These two concepts are closely related because the higher observability a system has, the better you can monitor it.</p>
<h2 id="expected-and-unexpected-problems">Expected and Unexpected Problems</h2>
<p>Monitoring is helpful when expected things fail. And by expected, I mean things we can set alerts on beforehand. We can start monitoring common things every single software system has like CPU, memory or disk usage, request counts, 4xx responses, 5xx responses and average/max durations. Then we can set alarms on Exceptions from the codebase by checking logs or something more advanced. We can also take it one step further and monitor application/domain specific events like login requests or purchase event numbers, revenue etc.</p>
<p>Observability on the other hand helps with dealing with unexpected problems as well. To find the root cause of a completely new problem we can follow steps like this:</p>
<ol>
<li>check metrics to search for an anomaly(long durations, 5xx responses etc.)</li>
<li>focusing on a specific timeframe in logs, we can try to find a problematic event. We can search for the relevant log entries for the same request with a traceId</li>
<li>using the same traceId from logs, we can analyze the lifecycle of problematic requests</li>
</ol>
<p>Sometimes we can find causes of problems very easily and go on with our lives and sometimes even with all the data in our hands, it is really difficult to find something concrete. There is always room for improvement with dashboards, alert runbooks and better log messages.</p>
<h2 id="benefits">Benefits</h2>
<p>Both observability and monitoring are highly valuable concepts because in an ideal world:</p>
<ol>
<li>If there are no problems in the system, we should be able to relax and sleep at night knowing that we would be notified with an alert if and when something goes wrong.</li>
<li>And when there is a problem, we should first be notified and then have the required information available to investigate the root cause and do something in a short time.</li>
<li>Another huge benefit of having an observable and monitored system is that it provides confidence and speed to developers. They can know if a change has caused any problems or not. And if it did, they are aware of the problem as soon as possible and more consistently.</li>
</ol>
<h2 id="future">Future</h2>
<p>With successful projects like OpenTelemetry(previously OpenTracing and OpenCensus) and OpenMetrics there is a lot of discussion and standardization taking place in this area. It is an exciting field with lots of things to learn so I hope to learn and write more about this.</p>
]]></content></item><item><title>Design Patterns - Singleton</title><link>https://baris.io/posts/singleton/</link><pubDate>Mon, 19 Apr 2021 23:49:53 +0200</pubDate><guid>https://baris.io/posts/singleton/</guid><description>Singleton is a design pattern that limits the instantiation of a class to a single instance and provides global access to it.
If we want to have only a single instance of a class, and it must be accessible from a well-defined access point we can use singletons. In recent years singletons are seen as bad practice but they are still one of the most well-known design patterns. They are used in logging, caching, hardware interfaces, and configuration/properties files.</description><content type="html"><![CDATA[<p>Singleton is a design pattern that limits the instantiation of a class to a single instance and provides global access to it.</p>
<p>If we want to have only a single instance of a class, and it must be accessible from a well-defined access point we can use singletons. In recent years singletons are seen as <a href="https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons">bad practice</a> but they are still one of the most well-known design patterns. They are used in logging, caching, hardware interfaces, and configuration/properties files. Singletons are pretty easy(deceptively) to implement.</p>
<p>For a basic implementation, we need:</p>
<ul>
<li>a private constructor to restrict new instance creation</li>
<li>a static member of singleton type</li>
<li>a static public getInstance method to give access to this instance</li>
</ul>
<h2 id="basic-implementation">Basic Implementation</h2>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>

    <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Although this is usable, we generally want to lazily initialize our singleton instance because if we have a lot of singleton classes and if all of them are eagerly loaded, the startup of our application will be affected.</p>
<h2 id="lazy-loading">Lazy Loading</h2>
<p>So we can naively change it to something like this.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>This is a little bit better but we have new problems now because this implementation is not threadsafe. Also, other people can use reflection to bypass our restriction on the constructor.</p>
<h2 id="thread-safety">Thread-Safety</h2>
<p>We should make the instance variable <em>volatile</em> to give it visibility across threads and make the instantiation synchronized.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&#34;Already instantiated&#34;</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">synchronized</span><span class="o">(</span><span class="n">MySingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>We compare the instance with null twice, the first one is to not block reads to the instance if it is already initialized. If we made the getInstance method synchronized, it would also work but with much worse performance.</p>
<h2 id="enum-singletons">Enum Singletons</h2>
<p>Even though it looks like a weird trick, using <a href="https://stackoverflow.com/a/71399">enums</a> is widely accepted as one of the best ways to implement singletons. We solve the problems with thread-safety, reflection, and lazy loading. I did not write about them here but using Enums solve problems with cloning and serialization as well.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">MySingleton</span> <span class="o">{</span>
    <span class="n">INSTANCE</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div><p>We should consider these before using singletons:</p>
<ul>
<li>They violate the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> since they control their lifecycle and behavior</li>
<li>They cause the code to be <a href="https://stackoverflow.com/q/2832017">tightly coupled</a></li>
<li>They make testing <a href="https://stackoverflow.com/a/2085988">harder</a></li>
<li>If we are not careful they are not thread-safe</li>
</ul>
<p>Spring beans have singleton scope by default, but they are not exactly the same concept. Java Singletons are scoped by the Java class loader, Spring singletons on the other hand can be any class we have written but spring will only create one instance for that class in that container context.</p>
]]></content></item><item><title>Design Patterns - Builder</title><link>https://baris.io/posts/builder/</link><pubDate>Mon, 19 Apr 2021 23:48:35 +0200</pubDate><guid>https://baris.io/posts/builder/</guid><description>The builder pattern allows us to write readable and understandable code to build complex objects. It is generally used to handle the construction of objects that contain a lot of parameters. They are usually implemented as static inner classes. StringBuilder is a good example that is used a lot.
But first, let&amp;rsquo;s talk about the alternatives first.
Telescoping constructors In this pattern, we have multiple constructors to support multiple combinations of parameters to create an instance.</description><content type="html"><![CDATA[<p>The builder pattern allows us to write readable and understandable code to build complex objects.
It is generally used to handle the construction of objects that contain a lot of parameters.
They are usually implemented as static inner classes. StringBuilder is a good example that is used a lot.</p>
<p>But first, let&rsquo;s talk about the alternatives first.</p>
<h2 id="telescoping-constructors">Telescoping constructors</h2>
<p>In this pattern, we have multiple constructors to support multiple combinations of parameters to create an instance.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">producer</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">producer</span><span class="o">,</span> <span class="n">String</span> <span class="n">director</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDirector</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProducer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>This is pretty straightforward but not very useful as the number of fields increases.
We create immutable objects with this approach but there are some problems with this approach.</p>
<ul>
<li>We need to write a lot of constructors to support all parameter combinations.</li>
<li>What if we wanted to create a movie with a director but without a producer? This becomes more of a problem if parameters have the same type.</li>
</ul>
<h2 id="exposed-setters">Exposed setters</h2>
<p>Another way to deal with this problem is by exposing setters for every field we have.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDirector</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProducer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDirector</span><span class="o">(</span><span class="n">String</span> <span class="n">director</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProducer</span><span class="o">(</span><span class="n">String</span> <span class="n">producer</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>This is probably the most used and simplest pattern since we can easily auto-generate setter and getter methods.
There are some problems with this approach as well</p>
<ul>
<li>Exposing setters break immutability, so it is not a good idea for <a href="http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html">various reasons</a></li>
<li>This class doesn&rsquo;t signify which of these setters must be used to create a valid object. So we can create an instance in an invalid state.</li>
</ul>
<h2 id="builder">Builder</h2>
<p>A simple implementation for the builder pattern for the movie class would look like this</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

  <span class="kd">private</span> <span class="nf">Movie</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">title</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">director</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDirector</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProducer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setDirector</span><span class="o">(</span><span class="n">String</span> <span class="n">director</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">director</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setProducer</span><span class="o">(</span><span class="n">String</span> <span class="n">producer</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Movie</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">Movie</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>If we want to make sure some fields are set, we can get them in the builder, constructor, or we can throw exceptions in the build method or somewhere else by validating them.</li>
<li>They are very easy to implement</li>
<li>They have very few drawbacks</li>
<li>A class with 4 parameters is not hard to build but when you have 9 parameters and 4 of them must not be null, this becomes much more helpful.</li>
<li>Even though they are generally used as inner static classes we can add a builder to legacy code pretty easily as a separate class</li>
</ul>
<p>Using generics makes really efficient constructors even for multiple layers of child-parent hierarchies. Let&rsquo;s have a look at a builder for User and Project which extends CompanyEntity and BaseEntity classes.</p>
<h3 id="baseentity">BaseEntity</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">long</span> <span class="n">createdAt</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">long</span> <span class="n">updatedAt</span><span class="o">;</span>

  <span class="n">BaseEntity</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createdAt</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">updatedAt</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">updatedAt</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getUpdatedAt</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">updatedAt</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">protected</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">BaseEntity</span><span class="o">,</span> <span class="n">B</span> <span class="kd">extends</span> <span class="n">Builder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">updatedAt</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setId</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="kt">long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setUpdatedAt</span><span class="o">(</span><span class="kt">long</span> <span class="n">updatedAt</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">updatedAt</span> <span class="o">=</span> <span class="n">updatedAt</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">T</span> <span class="nf">build</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="companyentity">CompanyEntity</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">CompanyEntity</span> <span class="kd">extends</span> <span class="n">BaseEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">companyId</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span>

  <span class="n">CompanyEntity</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">companyId</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">companyId</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">companyId</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">companyName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">companyId</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">companyName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">protected</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">,</span> <span class="n">B</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="kd">extends</span>
      <span class="n">BaseEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setCompanyId</span><span class="o">(</span><span class="n">String</span> <span class="n">companyId</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">companyId</span> <span class="o">=</span> <span class="n">companyId</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setCompanyName</span><span class="o">(</span><span class="n">String</span> <span class="n">companyName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">companyName</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="user">User</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>

  <span class="n">User</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">username</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">firstName</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lastName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">User</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="project">Project</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Project</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">projectDepartment</span><span class="o">;</span>

  <span class="n">Project</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">projectDepartment</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">projectDepartment</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProjectDepartment</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">projectDepartment</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">,</span> <span class="n">Project</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">projectDepartment</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setProjectDepartment</span><span class="o">(</span><span class="n">String</span> <span class="n">projectDepartment</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">projectDepartment</span> <span class="o">=</span> <span class="n">projectDepartment</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Project</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">Project</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>We can use our builders just like below</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setCompanyId</span><span class="o">(</span><span class="s">&#34;OpsGenie&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
        <span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="s">&#34;asd&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="n">Project</span> <span class="n">project</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Project</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setCompanyId</span><span class="o">(</span><span class="s">&#34;OpsGenie&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
        <span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;thundra&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre></div><p>The reason for using two different generics on our Builder classes are;</p>
<ul>
<li>The first one is used in the build method, and it returns the type of the child class.</li>
<li>The second one is used as the return value of our setter methods in the builder.
Without it, our setId method would return a BaseEntity.Builder and we couldn&rsquo;t set the child class fields after that.</li>
</ul>
]]></content></item></channel></rss>