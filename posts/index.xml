<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on baris.io</title><link>https://baris.io/posts/</link><description>Recent content in Posts on baris.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 May 2021 16:00:00 +0200</lastBuildDate><atom:link href="https://baris.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>2021 May Reading List</title><link>https://baris.io/posts/2021-may-reading-list/</link><pubDate>Wed, 26 May 2021 16:00:00 +0200</pubDate><guid>https://baris.io/posts/2021-may-reading-list/</guid><description>Serverless Email Server on AWS
Why is continuous integration so important
Hosting SQLite databases on Github Pages
Listen to Postgresql changes via websockets
The end of AMP
Signal - Instagram ads you will never see
Cloud Native Glossary
Smithy - A language for defining services and SDKs
Java beats out C++, Rust, C#, and Golang in gRPC throughput performance
Correlating Signals - Observability
Java - teeing
systemd - the good parts</description><content type="html"><![CDATA[<p><a href="https://github.com/0x4447/0x4447_product_s3_email">Serverless Email Server on AWS</a></p>
<p><a href="https://medium.com/the-making-of-whereby/why-continuous-integration-is-so-important-7bb63ba5dc57">Why is continuous integration so important</a></p>
<p><a href="https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/">Hosting SQLite databases on Github Pages</a></p>
<p><a href="https://github.com/supabase/realtime">Listen to Postgresql changes via websockets</a></p>
<p><a href="ttps://www.lafoo.com/the-end-of-amp/">The end of AMP</a></p>
<p><a href="https://signal.org/blog/the-instagram-ads-you-will-never-see/">Signal - Instagram ads you will never see</a></p>
<p><a href="https://github.com/cncf/glossary">Cloud Native Glossary</a></p>
<p><a href="https://awslabs.github.io/smithy/">Smithy - A language for defining services and SDKs</a></p>
<p><a href="https://github.com/LesnyRumcajs/grpc_bench/wiki/2021-04-13-bench-results">Java beats out C++, Rust, C#, and Golang in gRPC throughput performance</a></p>
<p><a href="https://www.bwplotka.dev/2021/correlations-exemplars">Correlating Signals - Observability</a></p>
<p><a href="https://blog.frankel.ch/teeing-java-api/">Java - teeing</a></p>
<p><a href="https://christine.website/talks/systemd-the-good-parts-2021-05-16">systemd - the good parts</a></p>
<p><a href="https://www.freecodecamp.org/news/technical-blogging-basics/">Technical Blogging Basics</a></p>
<p><a href="https://blog.cloudflare.com/introducing-cryptographic-attestation-of-personhood/">Alternative to Captcha by Cloudflare</a></p>
<p><a href="https://docs.scala-lang.org/scala3/new-in-scala3.html">Scala 3</a></p>
<p><a href="https://developers.google.com/tech-writing/overview">Technical Writing by Google</a></p>
<p><a href="https://sammancoaching.org/">Samman Technical Coaching</a></p>
<p><a href="https://madned.substack.com/p/a-teenagers-guide-to-avoiding-actual">A teenagers guide to avoiding actual work</a></p>
<p><a href="http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html">Concurrency vs Parallelism</a></p>
<p><a href="https://blog.stackblitz.com/posts/introducing-webcontainers/">Webcontainers - Run NodeJS in your browser</a></p>
<p><a href="https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/">Extreme Http Performance Tuning</a></p>
<p><a href="https://eng.uber.com/architecture-api-gateway/">Uber&rsquo;s API Gateway</a></p>
<p><a href="https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/">Why and How GitHub is adopting OpenTelemetry</a></p>
]]></content></item><item><title>Creating a Blog on a custom domain with GitHub Actions and Hugo</title><link>https://baris.io/posts/blog-hugo-github-pages/</link><pubDate>Sun, 09 May 2021 09:09:00 +0200</pubDate><guid>https://baris.io/posts/blog-hugo-github-pages/</guid><description>I always wanted to have a personal website where I write articles occasionally. Bought baris.io many years ago for this reason but finding time to blog consistently was really difficult for me. Between work, chores, friends/family, Twitch/YouTube/video games and rest, there was never enough time.
While it also has some drawbacks, one of the few benefits of COVID-19 is that we are working from our homes, so I do not need to commute to work anymore.</description><content type="html"><![CDATA[<p>I always wanted to have a personal website where I write articles occasionally.
Bought baris.io many years ago for this reason but finding time to blog consistently was really difficult for me.
Between work, chores, friends/family, Twitch/YouTube/video games and rest, there was never enough time.</p>
<p>While it also has some drawbacks, one of the few benefits of COVID-19 is that we are working from our homes,
so I do not need to commute to work anymore. This means saving 1-2 hours every day that I can use to focus on a blog.</p>
<h2 id="reasons-for-blogging">Reasons for blogging</h2>
<p>Writing articles about technical topics is an incredibly effective way to learn. This is the main reason I want to have a blog.
However, there are other benefits as well.</p>
<ul>
<li>Motivation to more thoroughly investigate things</li>
<li>Building up a portfolio over time</li>
<li>Practicing technical writing skills</li>
<li>Having an online presence</li>
</ul>
<p>Also, I really feel like having progress on a publicly visible website for a long time would be really satisfying.</p>
<h2 id="tech-stack">Tech Stack</h2>
<p>I wanted a simple, fast, clean looking personal blog because I am a big fan of minimalist products.
Features like multiple language support, comments, sign-ups, newsletters or any other dynamic data was not necessary in my opinion, at least initially.
For these reasons, static site generators like hugo, jekyll and gatsby looked like good ideas.</p>
<p>In the end I went with <a href="https://gohugo.io/">Hugo</a> and <a href="https://github.com/Track3/hermit">hermit</a> theme.</p>
<p>All the code related to this blog is <a href="(https://github.com/mbaris/hugo-blog)">publicly available on GitHub</a></p>
<p>The website is hosted on <a href="https://pages.github.com/">GitHub Pages</a></p>
<p>Using baris.io as a custom domain by <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">adding a CNAME file</a> to the repository</p>
<p>GitHub Actions are used with <a href="https://github.com/peaceiris/actions-hugo">Hugo Setup Action </a> to build static files from templates and trigger a deployment after every commit.</p>
<p>I am quite happy with the current tech stack because it costs me nothing apart from the domain name to host this website.
It is also really easy to push updates and make changes.</p>
<h2 id="pushing-an-update">Pushing an Update</h2>
<p>The repository has two branches.
<em>master</em> has hugo templates and markdown files
<em>gh-pages</em> has the html, css and javascript file which can be hosted</p>
<p>I create new posts with the command</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new posts/post-name.md
</code></pre></div><p>Then edit markdown files on Intellij IDEA Community Edition. It might seem like an overkill but idea has a built-in
markdown editor, git diff tool, terminal and a plugin for hugo server, so it is actually really effective in my opinion.</p>
<p>After preparing markdown files, I push commits to the master branch on GitHub and GitHub Actions takes care of the rest.
I eventually want to prepare more in depth posts about Observability or Infrastructure but
my main focus right now writing posts consistently, even if they are a little shallow.</p>
]]></content></item><item><title>Grafana Dashboard for Spring Boot via Micrometer and Prometheus</title><link>https://baris.io/posts/micrometer-spring-boot/</link><pubDate>Fri, 07 May 2021 10:10:24 +0200</pubDate><guid>https://baris.io/posts/micrometer-spring-boot/</guid><description>We will be implementing a grafana dashboard with metrics from a prometheus instance, which periodically fetches data from a Spring Boot App. I will keep this implementation as minimal as I can and will create another post with more detailed use cases.
We will begin by generating a simple project on Spring Initialzr
We just need the dependencies to Spring Boot Web, Spring Boot Actuator and Prometheus Registry for Micrometer. Once we import the project and run it, we will see in the logs that actuator is running for 2 endpoints already.</description><content type="html"><![CDATA[<p>We will be implementing a grafana dashboard with metrics from a prometheus instance, which periodically fetches data from a Spring Boot App.
I will keep this implementation as minimal as I can and will create another post with more detailed use cases.</p>
<p>We will begin by generating a simple project on <a href="https://start.spring.io/">Spring Initialzr</a></p>
<p><img src="/images/metrics/spring.webp" alt="Spring Starter"></p>
<p>We just need the dependencies to Spring Boot Web, <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html">Spring Boot Actuator</a>
and <a href="https://micrometer.io/docs/registry/prometheus">Prometheus Registry for Micrometer</a>.
Once we import the project and run it, we will see in the logs that actuator is running for 2 endpoints already.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">No active profile set, falling back to default profiles: default
Tomcat initialized with port(s): 8080 (http)
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.45]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 906 ms
Initializing ExecutorService &#39;applicationTaskExecutor&#39;
Exposing 2 endpoint(s) beneath base path &#39;/actuator&#39;
Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
Started MetricsDemoAppApplication in 1.793 seconds (JVM running for 2.086)
</code></pre></div><p>These two endpoints are info and health.</p>
<p>We can call them to verify if everything is working correctly.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl localhost:8080/actuator/health
<span class="o">{</span>
  <span class="s2">&#34;status&#34;</span>: <span class="s2">&#34;UP&#34;</span>
<span class="o">}</span>
</code></pre></div><p>Micrometer Prometheus registry exposes a lot of useful metrics, however it is not autoconfigured by default.
We have to add a line in our <em>application.yml</em> under <em>resources</em> to enable its integration with actuator.</p>
<h3 id="applicationyml">application.yml</h3>
<pre><code>management.endpoints.web.exposure.include=info,health,prometheus
</code></pre><p>If we restart the app after adding this line, we will see that we now have 3 endpoints configured by actuator.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">Exposing 3 endpoint(s) beneath base path &#39;/actuator&#39;
</code></pre></div><p>The response from this new /prometheus endpoint is in Prometheus Exposition Format which I have talked about in my previous post.</p>
<pre><code>curl localhost:8080/actuator/prometheus
</code></pre><div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text"># HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset
# TYPE jvm_threads_peak_threads gauge
jvm_threads_peak_threads 21.0
# HELP process_files_open_files The open file descriptor count
# TYPE process_files_open_files gauge
process_files_open_files 58.0
# HELP tomcat_sessions_rejected_sessions_total  
# TYPE tomcat_sessions_rejected_sessions_total counter
tomcat_sessions_rejected_sessions_total 0.0
# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution
# TYPE jvm_classes_unloaded_classes_total counter
jvm_classes_unloaded_classes_total 0.0
# HELP tomcat_sessions_created_sessions_total  
# TYPE tomcat_sessions_created_sessions_total counter
tomcat_sessions_created_sessions_total 0.0
# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine
# TYPE jvm_classes_loaded_classes gauge
jvm_classes_loaded_classes 7030.0
# HELP process_uptime_seconds The uptime of the Java virtual machine
# TYPE process_uptime_seconds gauge
process_uptime_seconds 155.295
# HELP jvm_threads_daemon_threads The current number of live daemon threads
# TYPE jvm_threads_daemon_threads gauge
jvm_threads_daemon_threads 17.0
# HELP system_cpu_usage The &#34;recent cpu usage&#34; for the whole system
# TYPE system_cpu_usage gauge
system_cpu_usage 0.0
...
</code></pre></div><p>This format can be ingested by prometheus directly. So what we need now is to run a prometheus and grafana instances.
One of the easiest ways to achieve this is using docker-compose on development stage.</p>
<h3 id="docker-composeyml">docker-compose.yml</h3>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">version: &#39;3.7&#39;
services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
</code></pre></div><h3 id="prometheusyml">prometheus.yml</h3>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text"># Default settings from https://prometheus.io/docs/prometheus/latest/getting_started/
global:
scrape_interval:     15s
scrape_configs:
- job_name: &#39;prometheus&#39;
  metrics_path: &#39;/actuator/prometheus&#39;
  scrape_interval: 5s
  static_configs:
    - targets: [&#39;host.docker.internal:8080&#39;]
</code></pre></div><p>We need these two files in a folder where we will be running</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose up -d
</code></pre></div><p>If there are no errors, we should have two running containers now.</p>
<p><img src="/images/metrics/docker-dashboard.webp" alt="Docker Dashboard"></p>
<p>So at this point we have</p>
<ul>
<li>A Spring Boot app running on 8080</li>
<li>Grafana on 3000</li>
<li>Prometheus on 9090</li>
</ul>
<p>On localhost:9090/targets we should see the state of our Spring Boot app as <em>UP</em> in</p>
<p><img src="/images/metrics/prometheus.webp" alt="Prometheus Targets"></p>
<p>Now that we have a Prometheus instance which is collecting metrics from our app, we can start exposing this data to Grafana.</p>
<p>We can log in to grafana on localhost:3000 with default credentials, <em>username:admin password:admin</em>
First thing we need to do is to add Prometheus as a data source.</p>
<p><img src="/images/metrics/data-source-prometheus.webp" alt="Prometheus Targets"></p>
<p>We are using <em>host.docker.internal:9090</em> to target Prometheus.
localhost:9090 would not work because both apps are running on containers.</p>
<p>Now that we have a datasource, we can create dashboards.</p>
<p>While we can also create dashboards manually, micrometer has a great template we can use for tomcat + jvm metrics they publish.</p>
<p><img src="/images/metrics/import-dashboard.webp" alt="Import Dashboard"></p>
<p>We will load &ldquo;<a href="https://grafana.com/grafana/dashboards/4701%22">https://grafana.com/grafana/dashboards/4701&quot;</a> from grafana.com and choose Prometheus as our data source</p>
<p><img src="/images/metrics/dashboard-jvm.webp" alt="Dashboard JVM"></p>
]]></content></item><item><title>OpenMetrics and Prometheus Exposition Format</title><link>https://baris.io/posts/prometheus-exposition-format-openmetrics/</link><pubDate>Mon, 03 May 2021 22:00:00 +0200</pubDate><guid>https://baris.io/posts/prometheus-exposition-format-openmetrics/</guid><description>OpenMetrics is a CNCF project which aims to standardize the process of exposing metrics in cloud native apps. Specifications for OpenMetrics are public and can be read here
Prometheus Exposition Format OpenMetrics is based on Prometheus Exposition Format. Which is a simple, text-based and human-readable data format with wide adoption in the community.
There were hundreds of integrations around this data format for Prometheus, even some other monitoring tools started reusing it.</description><content type="html"><![CDATA[<p>OpenMetrics is a CNCF project which aims to standardize the process of exposing metrics in cloud native apps.
Specifications for OpenMetrics are public and can be read <a href="https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md">here</a></p>
<h2 id="prometheus-exposition-format">Prometheus Exposition Format</h2>
<p>OpenMetrics is based on <em>Prometheus Exposition Format</em>. Which is a simple, text-based and human-readable data format with wide adoption in the community.</p>
<p>There were hundreds of integrations around this data format for Prometheus, even some other monitoring tools started reusing it.
However, having &ldquo;Prometheus&rdquo; in the name made it difficult to get support from competitors or other relevant parties.
OpenMetrics wants to change this by being a more vendor-neutral and <em>open</em> data format.
This may look like a strategic PR move, but it has the support of some of the largest organizations already. So looks like it has a great future.</p>
<h3 id="data-model">Data Model</h3>
<p>Exposed metric data in OpenMetrics looks like this.</p>
<pre><code># TYPE acme_http_router_request_seconds summary
# UNIT acme_http_router_request_seconds seconds
# HELP acme_http_router_request_seconds Latency though all of ACME's HTTP request router.
acme_http_router_request_seconds_sum{path=&quot;/api/v1&quot;,method=&quot;GET&quot;} 9036.32
acme_http_router_request_seconds_count{path=&quot;/api/v1&quot;,method=&quot;GET&quot;} 807283.0
acme_http_router_request_seconds_created{path=&quot;/api/v1&quot;,method=&quot;GET&quot;} 1605281325.0
acme_http_router_request_seconds_sum{path=&quot;/api/v2&quot;,method=&quot;POST&quot;} 479.3
acme_http_router_request_seconds_count{path=&quot;/api/v2&quot;,method=&quot;POST&quot;} 34.0
acme_http_router_request_seconds_created{path=&quot;/api/v2&quot;,method=&quot;POST&quot;} 1605281325.0
# TYPE go_goroutines gauge
# HELP go_goroutines Number of goroutines that currently exist.
go_goroutines 69
# TYPE process_cpu_seconds counter
# UNIT process_cpu_seconds seconds
# HELP process_cpu_seconds Total user and system CPU time spent in seconds.
process_cpu_seconds_total 4.20072246e+06
# EOF
</code></pre><p>One of the best features of this format is the readability.</p>
<p>With <em>TYPE</em> we define the <a href="https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#metric-types">metric type</a> and a label.
With <em>UNIT</em> we define the unit we are using in this MetricFamily.
<em>HELP</em> is a description of metric family for human consumption. Should be a short string so that it can be used as a tooltip.</p>
<h2 id="metric-types">Metric types</h2>
<h3 id="counter">Counter</h3>
<p>Counter is a metric type which counts discrete events. It must have a value called total and must be non-decreasing over time.
A counter can be used to count number of errors or requests, cpu time spent or some other cumulative data.</p>
<pre><code># TYPE process_cpu_seconds counter
# UNIT process_cpu_seconds seconds
# HELP process_cpu_seconds Total user and system CPU time spent in seconds.
process_cpu_seconds_total 4.20072246e+06
</code></pre><h3 id="gauge">Gauge</h3>
<p>Gauge is one of the simplest metric types there is. It consists of a single value which can change over time.
Contrary to counter, gauge can change its value at any given time and decrease in value.</p>
<pre><code># TYPE go_goroutines gauge
# HELP go_goroutines Number of goroutines that currently exist.
go_goroutines 69
</code></pre><h3 id="histogram">Histogram</h3>
<p>Histograms are used to measure discrete events and split them into buckets. Common examples are request durations and I/O request sizes.
Histogram MetricPoints must have at least one bucket. count, created and sum values are optional.</p>
<pre><code># TYPE request_duration histogram
# HELP request_duration help
request_duration_bucket{le=&quot;0&quot;} 0
request_duration_bucket{le=&quot;0.00000000001&quot;} 0
request_duration_bucket{le=&quot;0.0000000001&quot;} 0
request_duration_bucket{le=&quot;1e-04&quot;} 0
request_duration_bucket{le=&quot;1.1e-4&quot;} 0
request_duration_bucket{le=&quot;1.1e-3&quot;} 0
request_duration_bucket{le=&quot;1.1e-2&quot;} 0
request_duration_bucket{le=&quot;1&quot;} 0
request_duration_bucket{le=&quot;1e+05&quot;} 0
request_duration_bucket{le=&quot;10000000000&quot;} 0
request_duration_bucket{le=&quot;100000000000.0&quot;} 0
request_duration_bucket{le=&quot;+Inf&quot;} 3
request_duration_count 3
request_duration_sum 2
# EOF
</code></pre><h3 id="summary">Summary</h3>
<p>Summaries are pretty similar to histograms, and they may be used when histograms are too expensive.
We can use sum, count and created values to create summaries.</p>
<pre><code># TYPE acme_http_router_request_seconds summary
# UNIT acme_http_router_request_seconds seconds
# HELP acme_http_router_request_seconds Latency though all of ACME's HTTP request router.
acme_http_router_request_seconds_sum{path=&quot;/api/v1&quot;,method=&quot;GET&quot;} 9036.32
acme_http_router_request_seconds_count{path=&quot;/api/v1&quot;,method=&quot;GET&quot;} 807283.0
acme_http_router_request_seconds_created{path=&quot;/api/v1&quot;,method=&quot;GET&quot;} 1605281325.0
acme_http_router_request_seconds_sum{path=&quot;/api/v2&quot;,method=&quot;POST&quot;} 479.3
acme_http_router_request_seconds_count{path=&quot;/api/v2&quot;,method=&quot;POST&quot;} 34.0
acme_http_router_request_seconds_created{path=&quot;/api/v2&quot;,method=&quot;POST&quot;} 1605281325.0
</code></pre><h3 id="info">Info</h3>
<p>Info metrics are used to expose information which stays the same during the lifetime of a service.
Like build version, environment, region or service-name</p>
<h2 id="metrics-endpoint">Metrics Endpoint</h2>
<p>Implementers of this standard must expose metrics in OpenMetrics format a response to an HTTP Get request to a documented endpoint,
which <em>should</em> be named /metrics.
This endpoint will be consumed periodically, it must be able to respond with meaningful data for successive invocations.</p>
<h3 id="micrometer-and-spring-actuator">Micrometer and Spring Actuator</h3>
<p>My experience with exposing metrics(in Prometheus Exposition Format) to Datadog on a Spring Boot service
was incredibly easy and satisfying with <a href="https://spring.io/blog/2018/03/16/micrometer-spring-boot-2-s-new-application-metrics-collector">Spring Boot Actuator and Micrometer</a></p>
]]></content></item><item><title>Anatomy of a Dockerfile</title><link>https://baris.io/posts/anatomy-of-a-dockerfile/</link><pubDate>Sun, 02 May 2021 00:00:36 +0200</pubDate><guid>https://baris.io/posts/anatomy-of-a-dockerfile/</guid><description>What is a Dockerfile? Dockerfile is a text document containing commands which can be run in sequence to assemble a docker image.
A sample Dockerfile from the official docs looks like this
# syntax=docker/dockerfile:1FROMnode:12-alpineRUN apk add --no-cache python g++ makeWORKDIR/appCOPY . .RUN yarn install --productionCMD [&amp;#34;node&amp;#34;, &amp;#34;src/index.js&amp;#34;]Why do we need them? There are millions of images on dockerhub that we can directly start using with a command like this.
docker run -it --rm -d -p 8080:80 --name web nginx For various reasons, we may want to customize these base images.</description><content type="html"><![CDATA[<h2 id="what-is-a-dockerfile">What is a Dockerfile?</h2>
<p>Dockerfile is a text document containing commands which can be run in sequence to assemble a docker image.</p>
<p><a href="https://docs.docker.com/get-started/02_our_app/">A sample Dockerfile from the official docs</a> looks like this</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="c"># syntax=docker/dockerfile:1</span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> node:12-alpine</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk add --no-cache python g++ make<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> . .<span class="err">
</span><span class="err"></span><span class="k">RUN</span> yarn install --production<span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;node&#34;</span><span class="p">,</span> <span class="s2">&#34;src/index.js&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><h2 id="why-do-we-need-them">Why do we need them?</h2>
<p>There are millions of images on <a href="https://hub.docker.com/search?q=&amp;type=image">dockerhub</a> that we can directly start using with a command like this.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker run -it --rm -d -p 8080:80 --name web nginx
</code></pre></div><p>For various reasons, we may want to customize these base images. Docker images are immutable, so we can&rsquo;t <em>exactly</em> modify them.
We can technically run a container using an existing image, make some changes on it and then create a <em>new</em> image with these modifications using the <em>commit</em> command but there is a better way to accomplish this task
However, before we start modifying images, we need to understand the concept of <a href="https://docs.docker.com/storage/storagedriver/">layers in docker</a></p>
<h3 id="images-layers-and-containers">Images, Layers and Containers</h3>
<p>Each Docker container consists of a readable and writable layer on top of multiple read only layers.
These read only layers represent instructions in Dockerfiles, and they are deltas on previous layers(similar to git commits)</p>
<p>Multiple containers can share the underlying layers since they have their own writable/readable layer on top.
The readable and writable layer is a thin layer which has a lifespan associated with the container.</p>
<p><img src="/images/dockerfile/layers.jpeg" alt="Docker Layer Sharing">
<em>Docker Layer Sharing from <a href="https://docs.docker.com/storage/storagedriver/">About storage drivers</a></em></p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="c"># syntax=docker/dockerfile:1</span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> tiangolo/uvicorn-gunicorn-fastapi:python3.7</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="nv">maintainer</span><span class="o">=</span><span class="s2">&#34;Mehmet Baris Kalkar&#34;</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="nv">version</span><span class="o">=</span><span class="s2">&#34;1.1&#34;</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> addgroup api <span class="o">&amp;&amp;</span> adduser fast <span class="o">&amp;&amp;</span> adduser fast api <span class="err">
</span><span class="err"></span><span class="k">USER</span><span class="s"> fast:api</span><span class="err">
</span><span class="err"></span><span class="k">ENV</span> <span class="nv">GREETING</span><span class="o">=</span><span class="s2">&#34;hola&#34;</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> ./app /project/app<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /project</span><span class="err">
</span><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 8090</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;uvicorn&#34;</span><span class="p">,</span> <span class="s2">&#34;app.main:app&#34;</span><span class="p">,</span> <span class="s2">&#34;--host&#34;</span><span class="p">,</span> <span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;--port&#34;</span><span class="p">,</span> <span class="s2">&#34;8090&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p>If we create a container from this same dockerfile, we will see a log similar to this:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"> <span class="o">=</span>&gt; <span class="o">[</span>1/4<span class="o">]</span> FROM docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.7@sha256:a0e0188a485fd8c232d8774ae4680d3b834f95dd2deccdb0211ce71cfd778b97
 <span class="o">=</span>&gt; <span class="o">[</span>internal<span class="o">]</span> load build <span class="nv">context</span>
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; transferring context: <span class="nv">56B</span>
 <span class="o">=</span>&gt; <span class="o">[</span>2/4<span class="o">]</span> RUN addgroup api <span class="o">&amp;&amp;</span> adduser fast <span class="o">&amp;&amp;</span> adduser fast <span class="nv">api</span>
 <span class="o">=</span>&gt; <span class="o">[</span>3/4<span class="o">]</span> COPY ./app /project/app 
 <span class="o">=</span>&gt; <span class="o">[</span>4/4<span class="o">]</span> WORKDIR /project 
 <span class="o">=</span>&gt; exporting to <span class="nv">image</span> 
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; exporting <span class="nv">layers</span> 
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; writing image sha256:3cef1a7b7ddc037fa375a1fb37daa907bc31031fedb4142b98e98e582c0bead5
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; naming to docker.io/library/fastapi
</code></pre></div><p>One important thing to understand is <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache">how these instructions are cached</a>.
The result of some commands like FROM, COPY/ADD, RUN and WORKDIR can be cached.</p>
<p>Cached instructions are marked in the build command. If we build the same image by changing only the WORKDIR instruction to project2, we would see something like this.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"> <span class="o">=</span>&gt; CACHED <span class="o">[</span>1/4<span class="o">]</span> FROM docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.7@sha256:a0e0188a485fd8c232d8774ae4680d3b834f95dd2deccdb0211ce71cfd778b97
 <span class="o">=</span>&gt; <span class="o">[</span>internal<span class="o">]</span> load build <span class="nv">context</span>
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; transferring context: <span class="nv">56B</span>
 <span class="o">=</span>&gt; CACHED <span class="o">[</span>2/4<span class="o">]</span> RUN addgroup api <span class="o">&amp;&amp;</span> adduser fast <span class="o">&amp;&amp;</span> adduser fast <span class="nv">api</span>
 <span class="o">=</span>&gt; CACHED <span class="o">[</span>3/4<span class="o">]</span> COPY ./app /project/app
 <span class="o">=</span>&gt; <span class="o">[</span>4/4<span class="o">]</span> WORKDIR /project2
 <span class="o">=</span>&gt; exporting to <span class="nv">image</span>
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; exporting <span class="nv">layers</span>
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; writing image sha256:fe482845750cf79708d1a6cc107578e76bd843f92fb3092d636180547b32b897
 <span class="o">=</span>&gt; <span class="o">=</span>&gt; naming to docker.io/library/fastapi   
</code></pre></div><p>Let&rsquo;s take a look at this Dockerfile line by line</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="c"># syntax=docker/dockerfile:1</span><span class="err">
</span></code></pre></div><p>(Optional) <em><a href="https://docs.docker.com/engine/reference/builder/#syntax">syntax</a></em> is only enabled if we are building the image with <a href="https://docs.docker.com/engine/reference/builder/#buildkit">BuildKit</a>
In this line, we can inform the Dockerfile builder which syntax to use while parsing the Dockerfile</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> tiangolo/uvicorn-gunicorn-fastapi:python3.7</span><span class="err">
</span></code></pre></div><p><em>FROM</em> instruction is used to set the base image that we are going to use.
This should always be the first instruction in a Dockerfile.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">LABEL</span> <span class="nv">maintainer</span><span class="o">=</span><span class="s2">&#34;Mehmet Baris Kalkar&#34;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">LABEL</span> <span class="nv">version</span><span class="o">=</span><span class="s2">&#34;1.1&#34;</span><span class="err">
</span></code></pre></div><p><em>LABEL</em> instructions are used to add metadata to images.</p>
<p>Side note, There used to be a MAINTAINER instruction in the past, but it is deprecated now.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">RUN</span> addgroup api <span class="o">&amp;&amp;</span> adduser fast <span class="o">&amp;&amp;</span> adduser fast api <span class="err">
</span></code></pre></div><p><em>RUN</em> instruction is used to execute commands in a new layer on top of the current image and commit changes.
Following steps will use the new image.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">USER</span><span class="s"> fast:api</span><span class="err">
</span></code></pre></div><p><em>USER</em> instruction sets the user and group for the following steps.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">ENV</span> <span class="nv">GREETING</span><span class="o">=</span><span class="s2">&#34;hola&#34;</span><span class="err">
</span></code></pre></div><p><em>ENV</em> is used to add environment variables to the container. This variable can be used in the following steps during build as well.
If we want to use a variable in only a single command and not in the image, we can define use the RUN command with a variable instead.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">RUN</span> <span class="nv">LOCUST_LOCUSTFILE</span><span class="o">=</span>custom_locustfile.py locust<span class="err">
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">COPY</span> ./app /project/app<span class="err">
</span></code></pre></div><p><em>COPY [&ndash;chown=<!-- raw HTML omitted -->:<!-- raw HTML omitted -->] <!-- raw HTML omitted -->&hellip; <!-- raw HTML omitted --></em> copies files from source and adds it to the file system of the container
Target path is always relative to the working directory.</p>
<p><em>ADD</em> command also has a similar function, but it can also be used to fetch files from a remote URL or extract tar files.</p>
<p><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy">It is preferred to use COPY</a>
over add because COPY is a more transparent and simple instruction.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">WORKDIR</span><span class="s"> /project</span><span class="err">
</span></code></pre></div><p><em>WORKDIR</em> Sets the working directory to run instructions like CMD, RUN, ENTRYPOINT and COPY after this step.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">EXPOSE</span><span class="s"> 8090</span><span class="err">
</span></code></pre></div><p><em>EXPOSE</em> is an informational instruction. It does not actually publish any ports, but it is used as a documentation to let
users know which ports should be published to use the image.</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;uvicorn&#34;</span><span class="p">,</span> <span class="s2">&#34;app.main:app&#34;</span><span class="p">,</span> <span class="s2">&#34;--host&#34;</span><span class="p">,</span> <span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;--port&#34;</span><span class="p">,</span> <span class="s2">&#34;8090&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p><em>CMD</em> is the instruction to define the command you want to execute when run a container from an image.
It is possible to override this command while actually running the image, so it acts as a default.</p>
<p><em>ENTRYPOINT</em> and <em>CMD</em> are similar commands, <a href="https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/">the differences are explained here pretty well</a></p>
<p><em>VOLUME</em> command is used to create mounting points within the container.
We can use these volumes to <a href="https://docs.docker.com/storage/volumes/">share files between containers or the native host</a>.</p>
]]></content></item><item><title>2021 April Reading List</title><link>https://baris.io/posts/2021-april-reading-list/</link><pubDate>Fri, 30 Apr 2021 16:00:00 +0200</pubDate><guid>https://baris.io/posts/2021-april-reading-list/</guid><description>I will be sharing roughly grouped links to articles or videos I enjoyed during the month and this is the first one.
Architecture Heroku style deployments
build your own X
Porto - a modern software architecture pattern
GitOps recipe for progressive delivery
Istio telemetry
One Man SaaS one man SaaS architecture
tools of the trade
UML Diagrams has UML died without anyone noticing?
why UML really died?
Programming why is python so popular despite being so slow</description><content type="html"><![CDATA[<p>I will be sharing roughly grouped links to articles or videos I enjoyed during the month and this is the first one.</p>
<h2 id="architecture">Architecture</h2>
<p><a href="https://ricardoanderegg.com/posts/git-push-deployments-docker-tags/">Heroku style deployments</a></p>
<p><a href="https://github.com/danistefanovic/build-your-own-x">build your own X</a></p>
<p><a href="https://github.com/Mahmoudz/Porto">Porto - a modern software architecture pattern</a></p>
<p><a href="https://dev.to/stefanprodan/a-gitops-recipe-for-progressive-delivery-2pa3">GitOps recipe for progressive delivery</a></p>
<p><a href="https://blog.christianposta.com/understanding-istio-telemetry-v2/">Istio telemetry</a></p>
<h3 id="one-man-saas">One Man SaaS</h3>
<p><a href="https://anthonynsimon.com/blog/one-man-saas-architecture/">one man SaaS architecture</a></p>
<p><a href="https://anthonynsimon.com/blog/tools-of-the-trade/">tools of the trade</a></p>
<h3 id="uml-diagrams">UML Diagrams</h3>
<p><a href="https://garba.org/posts/2021/uml/">has UML died without anyone noticing?</a></p>
<p><a href="https://buttondown.email/hillelwayne/archive/why-uml-really-died/">why UML really died?</a></p>
<h2 id="programming">Programming</h2>
<p><a href="https://www.sethserver.com/python/why-is-python-so-slow.html">why is python so popular despite being so slow</a></p>
<p><a href="https://hodovi.ch/blog/advanced-usage-python-requests-timeouts-retries-hooks/">advanced python requests</a></p>
<p><a href="https://github.com/klen/py-frameworks-bench">python web framework benchmark</a></p>
<p><a href="https://dev.to/lucasnevespereira/write-a-rest-api-in-golang-following-best-practices-pe9">REST API in golang</a></p>
<p><a href="https://www.teamten.com/lawrence/writings/java-for-everything.html">Java for everything</a></p>
<p><a href="https://www.matuzo.at/blog/html-boilerplate/">HTML boilerplate</a></p>
<p><a href="https://changelog.com/posts/you-might-as-well-timestamp-it">you might as well timestamp it</a></p>
<p><a href="https://blog.reverberate.org/2021/04/21/musttail-efficient-interpreters.html">parsing Protobuf at 2+GB/s</a></p>
<p><a href="https://markodenic.com/use-google-like-a-pro/">intermediate google-fu</a></p>
<h2 id="tech-drama">Tech Drama</h2>
<h3 id="ci-and-cryptocurrency-miners">CI and Cryptocurrency Miners</h3>
<p><a href="https://therecord.media/github-investigating-crypto-mining-campaign-abusing-its-server-infrastructure/">GitHub is investigating crypto-miners abusing its servers</a></p>
<p><a href="https://layerci.com/blog/crypto-miners-are-killing-free-ci/">crypto-miners are killing free ci</a></p>
<p><a href="https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html">cryptocurrency is a disaster</a></p>
<p><a href="https://gregoryszorc.com/blog/2021/04/07/modern-ci-is-too-complex-and-misdirected/">modern CI is too complex and misdirected</a></p>
<h3 id="basecamp---politics">Basecamp - Politics</h3>
<p><a href="https://world.hey.com/jason/changes-at-basecamp-7f32afc5">changes at Basecamp</a></p>
<p><a href="https://world.hey.com/dhh/basecamp-s-new-etiquette-regarding-societal-politics-at-work-b44bef69">Basecamp etiquette regarding societal politics at work</a></p>
<h3 id="aws---opensearch">AWS - OpenSearch</h3>
<p><a href="https://aws.amazon.com/blogs/opensource/introducing-opensearch/">AWS OpensSearch</a></p>
<p><a href="https://www.elastic.co/what-is/opensearch">what is OpenSearch - by Elastic</a></p>
]]></content></item><item><title>Python Type Hints</title><link>https://baris.io/posts/python-typing/</link><pubDate>Tue, 27 Apr 2021 00:28:43 +0200</pubDate><guid>https://baris.io/posts/python-typing/</guid><description>The programming language I feel the most proficient and effective in is definitely Java, so I feel more at home with statically typed languages. Even though I really like Java and Spring Boot for large-scale web applications, Python is my go-to language for one-time-scripts, smaller apps and especially aws lambda functions
I&amp;rsquo;ve been writing a lot more python recently, and I really liked a library called typing. typing is a standard library module which provides a runtime to support type hints.</description><content type="html"><![CDATA[<p>The programming language I feel the most proficient and effective in is definitely Java, so I feel more at home with
statically typed languages. Even though I really like Java and <a href="https://spring.io/projects/spring-boot">Spring Boot</a> for
large-scale web applications, Python is my go-to language for one-time-scripts, smaller apps and
especially <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html">aws lambda functions</a></p>
<p>I&rsquo;ve been writing a lot more python recently, and I really liked a library called typing.
<em>typing</em> is a standard library module which provides a runtime to support type hints.</p>
<h3 id="type-hints">Type Hints</h3>
<p><em>type hinting</em> in this context means providing the types for parameters and returned objects.<br>
This is a simple example that we can see in the <a href="https://docs.python.org/3/library/typing.html">docs</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">greeting</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="n">name</span>
</code></pre></div><ul>
<li>a parameter <em>name</em> with the type of string</li>
<li>returned object of type string</li>
</ul>
<p>Apart from str, we can use types like List, Set, Dict or Tuple.</p>
<h3 id="static-type-checking">Static Type Checking?</h3>
<p>It is important to note that Python runtime does not enforce anything regarding these types. They are just &ldquo;hints&rdquo;
You might be wondering about the usefulness of this library if there is no enforcement but there are many benefits we
get.</p>
<ul>
<li>Dramatically reduces the number of TypeErrors you get.</li>
<li>Helps IDEs and static analyzers reason about your code. They can analyze it much more accurately with types</li>
<li>Helps documentation</li>
</ul>
<h3 id="where-to-use-them">Where to Use Them?</h3>
<p>In my opinion, If multiple people are working on a python codebase, it can be a great asset to the team because it makes
the code easier understand for everyone involved</p>
<p>It adds a development time overhead so might not be needed in throwaway one-time scripts, although we can still see the
benefit of type safety especially if it is a critical task.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">evaluate_users</span><span class="p">(</span><span class="n">user_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
    <span class="n">user_details</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">user_ids</span><span class="p">:</span>
        <span class="n">user_details</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">get_random_user_details</span><span class="p">(</span><span class="nb">id</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">user_details</span>


<span class="k">def</span> <span class="nf">get_random_user_details</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]]:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choices</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">ascii_uppercase</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">digits</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">))</span>
    <span class="n">age</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">99</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="p">:</span> <span class="n">age</span><span class="p">}</span>

</code></pre></div><p>If the expected type for user_id was an int instead of str, I would see a warning like this in IDEA,
<img src="/images/typing/ide-warning.png" alt="IDE warning"></p>
<p>Similarly, if the return does not match the expected one, the warning would look like this.
<img src="/images/typing/return-type.png" alt="IDE warning"></p>
<p>There are other benefits of this library, but I think parameter and return types are enough to consider using it</p>
]]></content></item><item><title>Infrastructure as Code</title><link>https://baris.io/posts/infrastructure-as-code/</link><pubDate>Sun, 25 Apr 2021 00:02:25 +0200</pubDate><guid>https://baris.io/posts/infrastructure-as-code/</guid><description>Infrastructure as Code is the practice of managing and provisioning resources through version controlled definition files.
Things to note beforehand
Cloud providers like AWS, Azure and GCP allow us to provision new resources in mere minutes or even seconds. Multiple deployments to production every day is not an exceptional thing anymore We want to use a similar infrastructure for multiple environments(dev,staging,prod etc.) and regions Infrastructure on cloud does not only mean hosting applications on a virtual machine It also includes services we can use like data stores, queues/topics, network components, access rights/permission models and much more Utilizing these resources efficiently will help us move forward much faster What problem does it solve?</description><content type="html"><![CDATA[<p><em>Infrastructure as Code</em> is the practice of managing and provisioning resources through version controlled definition files.</p>
<p>Things to note beforehand</p>
<ul>
<li>Cloud providers like AWS, Azure and GCP allow us to provision new resources in mere minutes or even seconds.</li>
<li>Multiple deployments to production every day is not an exceptional thing anymore</li>
<li>We want to use a similar infrastructure for multiple environments(dev,staging,prod etc.) and regions</li>
<li>Infrastructure on cloud does not only mean hosting applications on a virtual machine
It also includes services we can use like data stores, queues/topics, network components, access rights/permission models and much more</li>
<li>Utilizing these resources efficiently will help us move forward much faster</li>
</ul>
<h2 id="what-problem-does-it-solve">What problem does it solve?</h2>
<p>While cloud computing provides us an easy and fast way to get access to new resources, we still have to create, keep an inventory of and decommission them when necessary.
In a traditional on-premise setup, we would document and apply all the steps manually when we need to install and run services on these servers.
However, this approach does not scale well if we want to get the full benefits of using cloud providers.
Because development and maintenance of an application on cloud can easily require hundreds of resources across different accounts.
So we definitely need some kind of proper automation.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<ul>
<li>Create configuration files or scripts defining required resources, and their relations with each other.
These can be written in bash or domain specific languages like <a href="https://www.terraform.io">Terraform/HCL</a> or <a href="https://aws.amazon.com/cloudformation/resources/templates/">Cloudformation Templates</a></li>
<li>Store them in a version control system like git. This can be done in two ways and both has their advantages/disadvantages.
<ul>
<li>Along with the service using these resources</li>
<li>In a centralized repository which contains all resources used by the company</li>
</ul>
</li>
<li>Integrate these tools/scripts to our CI/CD pipeline</li>
<li>Applying the same configuration should always give the same result regardless of the state of the infrastructure when we started.
This is a broader concept called <a href="https://en.wikipedia.org/wiki/Idempotence">Idempotency</a> and it is a really important in IaC</li>
</ul>
<h3 id="imperative-vs-declarative">Imperative vs Declarative</h3>
<p>It is important to note that Infrastructure as Code can be implemented with both approaches effectively.</p>
<p>Using an imperative approach to create an AWS Lambda function would look like below</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">aws lambda create-function <span class="se">\
</span><span class="se"></span>    --function-name my-function <span class="se">\
</span><span class="se"></span>    --runtime nodejs12.x <span class="se">\
</span><span class="se"></span>    --zip-file fileb://my-function.zip <span class="se">\
</span><span class="se"></span>    --handler exports.test <span class="se">\
</span><span class="se"></span>    --role arn:aws:iam::123456789012:role/service-role/iam_for_lambda
</code></pre></div><p>While with a declarative approach, it would look like this.</p>
<div class="highlight"><pre class="chroma"><code class="language-HCL" data-lang="HCL"><span class="k">resource</span> <span class="s2">&#34;aws_lambda_function&#34; &#34;my-function&#34;</span> {
<span class="n">  filename</span>      <span class="o">=</span> <span class="s2">&#34;lambda_function_payload.zip&#34;</span>
<span class="n">  function_name</span> <span class="o">=</span> <span class="s2">&#34;lambda_function_name&#34;</span>
<span class="n">  role</span>          <span class="o">=</span> <span class="k">aws_iam_role</span><span class="p">.</span><span class="k">iam_for_lambda</span><span class="p">.</span><span class="k">arn</span>
<span class="n">  handler</span>       <span class="o">=</span> <span class="s2">&#34;exports.test&#34;</span>
<span class="n">  source_code_hash</span> <span class="o">=</span> <span class="k">filebase64sha256</span><span class="p">(</span><span class="s2">&#34;my-function.zip&#34;</span><span class="p">)</span>
<span class="n">  runtime</span> <span class="o">=</span> <span class="s2">&#34;nodejs12.x&#34;</span>
}
</code></pre></div><h2 id="why-should-we-use-it">Why should we use it?</h2>
<h3 id="consistency">Consistency</h3>
<p>Even if we are really careful, any manual process involving humans is error prone.
Getting the same result every time you need a new environment prevents so many problems like having different configurations
for test and prod environments or wasting time on errors due to misconfigurations</p>
<h3 id="speed">Speed</h3>
<p>If we properly integrate infrastructure as code to our build pipelines, our resource provisioning can be completely automated.
Not spending time on creating resources means more time efficient development and deployment processes.</p>
<h3 id="accountability">Accountability</h3>
<p>We already have best practices regarding source control. With peer reviews and pull requests, any change in the infrastructure is visible and obvious
We can track down what changed with which deployment and also revert to a previous version easily if we need to.</p>
<h3 id="scalability">Scalability</h3>
<p>We might need to deploy our services to completely new regions to expand or new environments for reasons like development, tests or demos.
With infrastructure as code, we are not bound to number of people who can create infrastructure and manage them for our team.</p>
<h2 id="conclusion">Conclusion</h2>
<p>My first experience with IaC was an in-house tool made by engineers in the company, and it saved so much time and effort when we were developing Opsgenie.
I can&rsquo;t imagine how difficult and stressful deployments would be if we were manually creating database tables, iam policies and queues every other day.</p>
<p>More recently, I have been using Terraform at work and what you can build with it is impressive. Especially since there are so many modules available to use.
I will take a look at <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints#localstack">creating infrastructure with</a> <a href="https://github.com/localstack/localstack">localstack</a> on a personal project soon</p>
<p>There is obviously a learning curve for everyone involved, but it is certainly worth the effort.<br>
In my opinion, this is one thing every software company should spend some time on.</p>
]]></content></item><item><title>Observability 101</title><link>https://baris.io/posts/observability/</link><pubDate>Mon, 19 Apr 2021 23:50:25 +0200</pubDate><guid>https://baris.io/posts/observability/</guid><description>Systems we build and maintain are becoming more complex and abstract with the increase in popularity of distributed systems, microservices, and cloud providers. With these new concepts, our view of failures has changed as well.
We have to assume things can and will break any time. So we have to make sure it is possible to understand what is happening within our services at any given time
Observability The Wikipedia definition of observability is</description><content type="html"><![CDATA[<p>Systems we build and maintain are becoming more complex and abstract with the increase in popularity of distributed systems, microservices, and cloud providers. With these new concepts, our view of failures has changed as well.</p>
<p>We have to assume things can and will break any time. So we have to make sure it is possible to understand what is happening within our services at any given time</p>
<h2 id="observability">Observability</h2>
<p>The Wikipedia definition of observability is</p>
<blockquote>
<p>observability is a measure of how well internal states of a system can be inferred from knowledge of its external outputs.</p>
</blockquote>
<p>In software, these external outputs are usually grouped as <em>Logs</em>, <em>Metrics</em>, and <em>Request Traces</em>. Called <em>The Three Pillars of Observability</em>, they solve different problems, have different weaknesses and strengths.</p>
<h2 id="monitoring">Monitoring</h2>
<p>Monitoring is another keyword that is used together with observability.
It is the act of collecting these external outputs and after aggregating, analyzing and visualizing them,
creating meaningful alerts with this data. These two concepts are closely related because the higher observability a system has,
the better you can monitor it.</p>
<h2 id="expected-and-unexpected-problems">Expected and Unexpected Problems</h2>
<p>Monitoring is helpful when expected things fail. By expected, I mean things we can set alerts on beforehand.
We can start monitoring common things every single software system has like CPU, memory or disk usage, request counts,
4xx responses, 5xx responses and average/max durations. Then we can set alarms on Exceptions from the codebase by checking logs or create alerts asynchronously by catching them.
We can also take it one step further and monitor application/domain specific events like login requests, purchase events, revenue etc.</p>
<p>On the other hand, Observability helps while with unexpected problems as well.</p>
<p>To find the root cause of a completely new problem we can follow steps like this:</p>
<ol>
<li>check metrics to search for an anomaly(long durations, 5xx responses etc.)</li>
<li>focusing on a specific timeframe in logs, we can try to find a problematic event. We can search for the relevant log entries for the same request with a traceId</li>
<li>using the same traceId from logs, we can analyze the lifecycle of problematic requests</li>
</ol>
<p>Having these logs, metrics or traces reliably improves Observability.
Sometimes we can find causes of problems very easily and go on with our lives and sometimes even with all the data in our hands,
it is still really difficult to find something concrete. There is always room for improvement with dashboards, alert runbooks and better log messages.</p>
<h2 id="benefits">Benefits</h2>
<p>Both observability and monitoring are highly valuable concepts because in an ideal world:</p>
<ul>
<li>If everything is working as expected in the system, we should be able to relax and sleep at night knowing that we would be notified with an alert if and when something goes wrong.</li>
<li>When there is a problem, we should first be notified and then have the required information available to investigate the root cause and do something in a short time.</li>
</ul>
<p>Another huge benefit of having an observable and monitored system is that it provides confidence and speed to developers.
They can know if a change has caused any problems or not. In case of an incident, they are aware of the issue as soon as possible and more consistently.</p>
<h2 id="future">Future</h2>
<p>With successful projects like OpenTelemetry(previously OpenTracing and OpenCensus) and OpenMetrics there is a lot of discussion and standardization taking place in this area. It is an exciting field with lots of things to learn so I hope to learn and write more about this.</p>
]]></content></item><item><title>Design Patterns - Singleton</title><link>https://baris.io/posts/singleton/</link><pubDate>Mon, 19 Apr 2021 23:49:53 +0200</pubDate><guid>https://baris.io/posts/singleton/</guid><description>Singleton is a design pattern that limits the instantiation of a class to a single instance and provides global access to it.
If we want to have only a single instance of a class, and it must be accessible from a well-defined access point we can use singletons. In recent years singletons are seen as bad practice but they are still one of the most well-known design patterns. They are used in logging, caching, hardware interfaces, and configuration/properties files.</description><content type="html"><![CDATA[<p>Singleton is a design pattern that limits the instantiation of a class to a single instance and provides global access to it.</p>
<p>If we want to have only a single instance of a class, and it must be accessible from a well-defined access point we can use singletons. In recent years singletons are seen as <a href="https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons">bad practice</a> but they are still one of the most well-known design patterns. They are used in logging, caching, hardware interfaces, and configuration/properties files. Singletons are pretty easy(deceptively) to implement.</p>
<p>For a basic implementation, we need:</p>
<ul>
<li>a private constructor to restrict new instance creation</li>
<li>a static member of singleton type</li>
<li>a static public getInstance method to give access to this instance</li>
</ul>
<h2 id="basic-implementation">Basic Implementation</h2>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>

    <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Although this is usable, we generally want to lazily initialize our singleton instance because if we have a lot of singleton classes and if all of them are eagerly loaded, the startup of our application will be affected.</p>
<h2 id="lazy-loading">Lazy Loading</h2>
<p>So we can naively change it to something like this.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>This is a little bit better but we have new problems now because this implementation is not threadsafe. Also, other people can use reflection to bypass our restriction on the constructor.</p>
<h2 id="thread-safety">Thread-Safety</h2>
<p>We should make the instance variable <em>volatile</em> to give it visibility across threads and make the instantiation synchronized.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&#34;Already instantiated&#34;</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">synchronized</span><span class="o">(</span><span class="n">MySingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>We compare the instance with null twice, the first one is to not block reads to the instance if it is already initialized. If we made the getInstance method synchronized, it would also work but with much worse performance.</p>
<h2 id="enum-singletons">Enum Singletons</h2>
<p>Even though it looks like a weird trick, using <a href="https://stackoverflow.com/a/71399">enums</a> is widely accepted as one of the best ways to implement singletons. We solve the problems with thread-safety, reflection, and lazy loading. I did not write about them here but using Enums solve problems with cloning and serialization as well.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">MySingleton</span> <span class="o">{</span>
    <span class="n">INSTANCE</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//some work here
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div><p>We should consider these before using singletons:</p>
<ul>
<li>They violate the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> since they control their lifecycle and behavior</li>
<li>They cause the code to be <a href="https://stackoverflow.com/q/2832017">tightly coupled</a></li>
<li>They make testing <a href="https://stackoverflow.com/a/2085988">harder</a></li>
<li>If we are not careful they are not thread-safe</li>
</ul>
<p>Spring beans have singleton scope by default, but they are not exactly the same concept. Java Singletons are scoped by the Java class loader, Spring singletons on the other hand can be any class we have written but spring will only create one instance for that class in that container context.</p>
]]></content></item><item><title>Design Patterns - Builder</title><link>https://baris.io/posts/builder/</link><pubDate>Mon, 19 Apr 2021 23:48:35 +0200</pubDate><guid>https://baris.io/posts/builder/</guid><description>The builder pattern allows us to write readable and understandable code to build complex objects. It is generally used to handle the construction of objects that contain a lot of parameters. They are usually implemented as static inner classes. StringBuilder is a good example that is used a lot.
But first, let&amp;rsquo;s talk about the alternatives first.
Telescoping constructors In this pattern, we have multiple constructors to support multiple combinations of parameters to create an instance.</description><content type="html"><![CDATA[<p>The builder pattern allows us to write readable and understandable code to build complex objects.
It is generally used to handle the construction of objects that contain a lot of parameters.
They are usually implemented as static inner classes. StringBuilder is a good example that is used a lot.</p>
<p>But first, let&rsquo;s talk about the alternatives first.</p>
<h2 id="telescoping-constructors">Telescoping constructors</h2>
<p>In this pattern, we have multiple constructors to support multiple combinations of parameters to create an instance.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">producer</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Movie</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">producer</span><span class="o">,</span> <span class="n">String</span> <span class="n">director</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDirector</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProducer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>This is pretty straightforward but not very useful as the number of fields increases.
We create immutable objects with this approach but there are some problems with this approach.</p>
<ul>
<li>We need to write a lot of constructors to support all parameter combinations.</li>
<li>What if we wanted to create a movie with a director but without a producer? This becomes more of a problem if parameters have the same type.</li>
</ul>
<h2 id="exposed-setters">Exposed setters</h2>
<p>Another way to deal with this problem is by exposing setters for every field we have.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDirector</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProducer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDirector</span><span class="o">(</span><span class="n">String</span> <span class="n">director</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProducer</span><span class="o">(</span><span class="n">String</span> <span class="n">producer</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>This is probably the most used and simplest pattern since we can easily auto-generate setter and getter methods.
There are some problems with this approach as well</p>
<ul>
<li>Exposing setters break immutability, so it is not a good idea for <a href="http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html">various reasons</a></li>
<li>This class doesn&rsquo;t signify which of these setters must be used to create a valid object. So we can create an instance in an invalid state.</li>
</ul>
<h2 id="builder">Builder</h2>
<p>A simple implementation for the builder pattern for the movie class would look like this</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

  <span class="kd">private</span> <span class="nf">Movie</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">title</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">director</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDirector</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">director</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProducer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">producer</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">director</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">producer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setDirector</span><span class="o">(</span><span class="n">String</span> <span class="n">director</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">director</span> <span class="o">=</span> <span class="n">director</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setProducer</span><span class="o">(</span><span class="n">String</span> <span class="n">producer</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">producer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Movie</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">Movie</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>If we want to make sure some fields are set, we can get them in the builder, constructor, or we can throw exceptions in the build method or somewhere else by validating them.</li>
<li>They are very easy to implement</li>
<li>They have very few drawbacks</li>
<li>A class with 4 parameters is not hard to build but when you have 9 parameters and 4 of them must not be null, this becomes much more helpful.</li>
<li>Even though they are generally used as inner static classes we can add a builder to legacy code pretty easily as a separate class</li>
</ul>
<p>Using generics makes really efficient constructors even for multiple layers of child-parent hierarchies. Let&rsquo;s have a look at a builder for User and Project which extends CompanyEntity and BaseEntity classes.</p>
<h3 id="baseentity">BaseEntity</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">long</span> <span class="n">createdAt</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">long</span> <span class="n">updatedAt</span><span class="o">;</span>

  <span class="n">BaseEntity</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createdAt</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">updatedAt</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">updatedAt</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getUpdatedAt</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">updatedAt</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">protected</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">BaseEntity</span><span class="o">,</span> <span class="n">B</span> <span class="kd">extends</span> <span class="n">Builder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">updatedAt</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setId</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="kt">long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setUpdatedAt</span><span class="o">(</span><span class="kt">long</span> <span class="n">updatedAt</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">updatedAt</span> <span class="o">=</span> <span class="n">updatedAt</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">T</span> <span class="nf">build</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="companyentity">CompanyEntity</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">CompanyEntity</span> <span class="kd">extends</span> <span class="n">BaseEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">companyId</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span>

  <span class="n">CompanyEntity</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">companyId</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">companyId</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">companyId</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">companyName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">companyId</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCompanyName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">companyName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">protected</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">,</span> <span class="n">B</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="kd">extends</span>
      <span class="n">BaseEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">companyName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setCompanyId</span><span class="o">(</span><span class="n">String</span> <span class="n">companyId</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">companyId</span> <span class="o">=</span> <span class="n">companyId</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">B</span> <span class="nf">setCompanyName</span><span class="o">(</span><span class="n">String</span> <span class="n">companyName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">companyName</span> <span class="o">=</span> <span class="n">companyName</span><span class="o">;</span>
      <span class="k">return</span> <span class="o">(</span><span class="n">B</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="user">User</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>

  <span class="n">User</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">username</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">firstName</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lastName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">User</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="project">Project</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Project</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">String</span> <span class="n">projectDepartment</span><span class="o">;</span>

  <span class="n">Project</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
    <span class="n">Validate</span><span class="o">.</span><span class="na">notBlank</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">projectDepartment</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">projectDepartment</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProjectDepartment</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">projectDepartment</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">CompanyEntity</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">,</span> <span class="n">Project</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">projectDepartment</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setProjectDepartment</span><span class="o">(</span><span class="n">String</span> <span class="n">projectDepartment</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">projectDepartment</span> <span class="o">=</span> <span class="n">projectDepartment</span><span class="o">;</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Project</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">Project</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>We can use our builders just like below</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setCompanyId</span><span class="o">(</span><span class="s">&#34;OpsGenie&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
        <span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="s">&#34;asd&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="n">Project</span> <span class="n">project</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Project</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">setCompanyId</span><span class="o">(</span><span class="s">&#34;OpsGenie&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
        <span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;thundra&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre></div><p>The reason for using two different generics on our Builder classes are;</p>
<ul>
<li>The first one is used in the build method, and it returns the type of the child class.</li>
<li>The second one is used as the return value of our setter methods in the builder.
Without it, our setId method would return a BaseEntity.Builder and we couldn&rsquo;t set the child class fields after that.</li>
</ul>
]]></content></item></channel></rss>