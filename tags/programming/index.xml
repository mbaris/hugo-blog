<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on baris.io</title><link>https://baris.io/tags/programming/</link><description>Recent content in programming on baris.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Jun 2021 18:00:00 +0200</lastBuildDate><atom:link href="https://baris.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Reactive Web Apps with Spring WebFlux</title><link>https://baris.io/posts/webflux-reactive/</link><pubDate>Tue, 01 Jun 2021 18:00:00 +0200</pubDate><guid>https://baris.io/posts/webflux-reactive/</guid><description>Spring WebFlux is a reactive-stack web framework.
Reactive Reactive, in this context refers to design guidelines on providing resilient, responsive, scalable and message driven applications. Reactive Manifesto is an important document about this topic.
WebFlux is built on reactive-streams specification, which only has components like Subscriber, Publisher, Subscription and Processor. Instead of building their custom implementation based on this specification, WebFlux uses the ProjectReactor library. Project Reactor is an incredibly well implementation of reactive streams with Mono and Flux as their publishers.</description></item><item><title>Python Type Hints</title><link>https://baris.io/posts/python-typing/</link><pubDate>Tue, 27 Apr 2021 00:28:43 +0200</pubDate><guid>https://baris.io/posts/python-typing/</guid><description>The programming language I feel the most proficient and effective in is definitely Java, so I feel more at home with statically typed languages. Even though I really like Java and Spring Boot for large-scale web applications, Python is my go-to language for one-time-scripts, smaller apps and especially aws lambda functions
I&amp;rsquo;ve been writing a lot more python recently, and I really liked a library called typing. typing is a standard library module which provides a runtime to support type hints.</description></item><item><title>Design Patterns - Singleton</title><link>https://baris.io/posts/singleton/</link><pubDate>Mon, 19 Apr 2021 23:49:53 +0200</pubDate><guid>https://baris.io/posts/singleton/</guid><description>Singleton is a design pattern that limits the instantiation of a class to a single instance and provides global access to it.
If we want to have only a single instance of a class, and it must be accessible from a well-defined access point we can use singletons. In recent years singletons are seen as bad practice but they are still one of the most well-known design patterns. They are used in logging, caching, hardware interfaces, and configuration/properties files.</description></item><item><title>Design Patterns - Builder</title><link>https://baris.io/posts/builder/</link><pubDate>Mon, 19 Apr 2021 23:48:35 +0200</pubDate><guid>https://baris.io/posts/builder/</guid><description>The builder pattern allows us to write readable and understandable code to build complex objects. It is generally used to handle the construction of objects that contain a lot of parameters. They are usually implemented as static inner classes. StringBuilder is a good example that is used a lot.
But first, let&amp;rsquo;s talk about the alternatives first.
Telescoping constructors In this pattern, we have multiple constructors to support multiple combinations of parameters to create an instance.</description></item></channel></rss>