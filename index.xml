<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>baris.io</title><link>https://baris.io/</link><description>Recent content on baris.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 19 Apr 2021 23:50:25 +0200</lastBuildDate><atom:link href="https://baris.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://baris.io/about/</link><pubDate>Wed, 21 Apr 2021 00:29:39 +0200</pubDate><guid>https://baris.io/about/</guid><description>Hey, I am Baris ðŸ‘‹ I am an engineer/geek from Turkey. I am currently working and living in Berlin.
This website will serve as a place to share what I am learning and working on. I also want to take more notes and have a deeper understanding of those topics while writing about them.
Things I am interested in nowadays Observability / OpenTelemetry and OpenMetrics Infrastructure as Code / Terraform Reactive Java / WebFlux Serverless Computing / AWS Lambda Minimal and fast websites Programming languages I use the most Java Python Javascript I also want to write some code with Rust, Go and Kotlin as well.</description></item><item><title>Observability 101</title><link>https://baris.io/posts/observability/</link><pubDate>Mon, 19 Apr 2021 23:50:25 +0200</pubDate><guid>https://baris.io/posts/observability/</guid><description>Systems we build and maintain are becoming more complex and abstract with the increase in popularity of distributed systems, microservices, and cloud providers. With these new concepts, our view of failures has changed as well.
We have to assume things can and will break when we do not expect. So we have to make sure it is possible to understand what is happening in our services it any given time</description></item><item><title>Design Patterns - Singleton</title><link>https://baris.io/posts/singleton/</link><pubDate>Mon, 19 Apr 2021 23:49:53 +0200</pubDate><guid>https://baris.io/posts/singleton/</guid><description>Singleton is a design pattern that limits the instantiation of a class to a single instance and provides global access to it.
If we want to have only a single instance of a class and it must be accessible from a well-defined access point we can use singletons. In recent years singletons are seen as bad practice but they are still one of the most well-known design patterns. They are used in logging, caching, hardware interfaces, and configuration/properties files.</description></item><item><title>Design Patterns - Builder</title><link>https://baris.io/posts/builder/</link><pubDate>Mon, 19 Apr 2021 23:48:35 +0200</pubDate><guid>https://baris.io/posts/builder/</guid><description>The builder pattern allows us to write readable and understandable code to build complex objects. It is generally used to handle the construction of objects that contain a lot of parameters. They are usually implemented as static inner classes. StringBuilder is a good example that is used a lot.
But first, let&amp;rsquo;s talk about the alternatives first.
Telescoping constructors In this pattern, we have multiple constructors to support multiple combinations of parameters to create an instance.</description></item></channel></rss>